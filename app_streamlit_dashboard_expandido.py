{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2699c197",
   "metadata": {},
   "source": [
    "# üìä Streamlit App Expandido ‚Äì Dashboard com Exporta√ß√£o e Filtro T√©cnico"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53577ba9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "\n",
    "st.set_page_config(page_title=\"Dashboard de Matches Expandido\", layout=\"wide\")\n",
    "\n",
    "st.title(\"üîç Dashboard de Recomenda√ß√£o de Candidatos e Vagas\")\n",
    "\n",
    "# Carregar os dados\n",
    "@st.cache_data\n",
    "def carregar_dados():\n",
    "    df = pd.read_csv(\"base_final_ml_com_nome_cliente.csv\")\n",
    "    df_app = pd.read_csv(\"df_applicants_limpo.csv\")\n",
    "    df_app['match_real'] = df_app['data_aceite'].notnull().astype(int)\n",
    "    df = df.merge(df_app[['codigo_profissional', 'match_real', 'nome']], on='codigo_profissional', how='left')\n",
    "    df['match_real'] = df['match_real'].fillna(0).astype(int)\n",
    "    df['cliente'] = df['cliente'].fillna(\"desconhecido\")\n",
    "    df['ranking_origem'] = df['ranking_origem'].fillna(\"indefinido\")\n",
    "    return df\n",
    "\n",
    "df = carregar_dados()\n",
    "\n",
    "# Filtros\n",
    "col1, col2, col3 = st.columns(3)\n",
    "clientes = df['cliente'].dropna().unique()\n",
    "titulos = df['titulo_vaga'].dropna().unique()\n",
    "rankings = df['ranking_origem'].dropna().unique()\n",
    "\n",
    "cliente_sel = col1.selectbox(\"Filtrar por Cliente\", options=[\"Todos\"] + sorted(clientes.tolist()))\n",
    "vaga_sel = col2.selectbox(\"Filtrar por T√≠tulo da Vaga\", options=[\"Todos\"] + sorted(titulos.tolist()))\n",
    "ranking_sel = col3.selectbox(\"Filtrar por Origem T√©cnica\", options=[\"Todos\"] + sorted(rankings.tolist()))\n",
    "\n",
    "df_filtrado = df.copy()\n",
    "if cliente_sel != \"Todos\":\n",
    "    df_filtrado = df_filtrado[df_filtrado['cliente'] == cliente_sel]\n",
    "if vaga_sel != \"Todos\":\n",
    "    df_filtrado = df_filtrado[df_filtrado['titulo_vaga'] == vaga_sel]\n",
    "if ranking_sel != \"Todos\":\n",
    "    df_filtrado = df_filtrado[df_filtrado['ranking_origem'] == ranking_sel]\n",
    "\n",
    "# Indicadores\n",
    "col1, col2, col3 = st.columns(3)\n",
    "col1.metric(\"üîÅ Total de Matches\", df_filtrado.shape[0])\n",
    "col2.metric(\"‚úÖ Matchs Aceitos\", df_filtrado['match_real'].sum())\n",
    "col3.metric(\"üìà % Aceite\", f\"{100 * df_filtrado['match_real'].mean():.2f}%\")\n",
    "\n",
    "# Gr√°fico de distribui√ß√£o de score\n",
    "st.subheader(\"Distribui√ß√£o de Score\")\n",
    "fig_score = px.histogram(df_filtrado, x='score', nbins=20, color='match_real',\n",
    "                         labels={'score': 'Score de Similaridade'}, barmode='overlay')\n",
    "st.plotly_chart(fig_score, use_container_width=True)\n",
    "\n",
    "# Gr√°fico de aceites por cliente\n",
    "st.subheader(\"Aceites Reais por Cliente\")\n",
    "df_aceites = df[df['match_real'] == 1].groupby('cliente').size().reset_index(name='quantidade')\n",
    "fig_aceites = px.bar(df_aceites.sort_values('quantidade', ascending=False), x='cliente', y='quantidade')\n",
    "st.plotly_chart(fig_aceites, use_container_width=True)\n",
    "\n",
    "# Tabela Top 5 por Vaga\n",
    "st.subheader(\"Top 5 Candidatos para Cada Vaga\")\n",
    "df_top5 = df_filtrado.sort_values(by='score', ascending=False).groupby('titulo_vaga').head(5)\n",
    "st.dataframe(df_top5[['titulo_vaga', 'nome', 'cliente', 'ranking_origem', 'score', 'match_real']].reset_index(drop=True))\n",
    "\n",
    "# Exporta√ß√£o\n",
    "st.subheader(\"üì§ Exportar Matches Filtrados\")\n",
    "csv = df_filtrado.to_csv(index=False).encode('utf-8')\n",
    "st.download_button(\"üì• Baixar como CSV\", data=csv, file_name=\"matches_filtrados.csv\", mime='text/csv')\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}